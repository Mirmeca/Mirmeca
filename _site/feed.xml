<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mirmeca</title>
    <description>Build apps on top of the WordPress API with Swift.</description>
    <link>/Mirmeca/</link>
    <atom:link href="/Mirmeca/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 15 Aug 2015 20:29:52 +1000</pubDate>
    <lastBuildDate>Sat, 15 Aug 2015 20:29:52 +1000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Building a Search Feature</title>
        <description>&lt;p&gt;The aim of this tutorial is to show you how you can build a search feature for your app on top of your WordPress backend using Mirmeca.
Mirmeca, helps you cut your dev time dramatically.&lt;/p&gt;

&lt;p&gt;This tutorial assumes you’re already familiar with Cocoapods as we’ll use it to install Mirmeca. You will also need to have an installation of WordPress running the &lt;a href=&quot;https://wordpress.org/plugins/json-rest-api/&quot;&gt;WP API plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;creating-a-new-project-and-installing-mirmeca&quot;&gt;1. Creating a new project and installing Mirmeca&lt;/h3&gt;

&lt;p&gt;Open XCode and create a new “Single View Application”. I will call mine “Breaking News”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/create-app.png&quot; alt=&quot;create app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;cd&lt;/code&gt; into your app’s directory and &lt;code&gt;pod init&lt;/code&gt; to create your &lt;code&gt;Podfile&lt;/code&gt; (if you haven’t installed Cocoapods, you’ll find a guide &lt;a href=&quot;http://guides.cocoapods.org/using/getting-started.html&quot;&gt;here&lt;/a&gt; - you can also install the framework manually).&lt;/p&gt;

&lt;p&gt;Now we need to add Mirmeca to our &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;8.0&#39;
use_frameworks!

target &#39;Breaking News&#39; do
  pod &#39;Mirmeca&#39;, :git =&amp;gt; &#39;git@github.com:Mirmeca/Mirmeca.git&#39;
end

target &#39;Breaking News&#39; do
end
&lt;/pre&gt;

&lt;p&gt;Just run &lt;code&gt;pod update&lt;/code&gt; and you’re all set for the first phase.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-view-controllers&quot;&gt;2. Setting up view controllers&lt;/h3&gt;

&lt;p&gt;Open up the newly created Workspace (&lt;code&gt;.xcworkspace&lt;/code&gt;) that Cocoapods created for you.&lt;/p&gt;

&lt;p&gt;Create a new class, a subclass of &lt;code&gt;UITableViewController&lt;/code&gt;, and simply call it &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/create-class.png&quot; alt=&quot;create class&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-tableviewcontroller&quot;&gt;a) TableViewController&lt;/h4&gt;

&lt;p&gt;In your &lt;code&gt;Storyboard&lt;/code&gt; and add a &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/add-table-view-controller.png&quot; alt=&quot;add table view controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then grab the &lt;code&gt;Storyboard entry point&lt;/code&gt; (the arrow currently sitting next to your &lt;code&gt;View Controller&lt;/code&gt;), and drag it to your freshly created &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/entry-point.png&quot; alt=&quot;entry point&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click your &lt;code&gt;TableViewController&lt;/code&gt;, and in the inspector, set its class to be &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/class-inspector.png&quot; alt=&quot;class inspector&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;b-search-bar--results-cells&quot;&gt;b) Search bar &amp;amp; results cells&lt;/h4&gt;

&lt;p&gt;Click the cell of our &lt;code&gt;TableViewController&lt;/code&gt;, and set its style to “Subtitle”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/subtitle.png&quot; alt=&quot;subtitle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll set our cell’s identifier as &lt;code&gt;postCell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/identifier.png&quot; alt=&quot;cell identifier&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now look for “Search Bar” in the object library.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/search-bar-obj-lib.png&quot; alt=&quot;subtitle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Drag it and drop it on your view above your cell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/search-bar-on-view.png&quot; alt=&quot;subtitle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’re done, select it and create an outlet on your &lt;code&gt;TableViewController&lt;/code&gt; class called &lt;code&gt;postsSearchBar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure your outlet is connected to the search bar on the view.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
class TableViewController: UITableViewController {
    @IBOutlet weak var postsSearchBar: UISearchBar!
&lt;/pre&gt;

&lt;h3 id=&quot;plugging-mirmeca-into-the-app&quot;&gt;3. Plugging Mirmeca into the app&lt;/h3&gt;
&lt;p&gt;It’s now time for the fun stuff and start getting data into our app.&lt;/p&gt;

&lt;p&gt;We have four simple steps ahead of us:&lt;br /&gt;
  &lt;strong&gt;a)&lt;/strong&gt; Declaring our environnements in the AppDelegate&lt;br /&gt;
  &lt;strong&gt;b)&lt;/strong&gt; Integrating our search bar&lt;br /&gt;
  &lt;strong&gt;c)&lt;/strong&gt; Fetching our searched posts&lt;br /&gt;
  &lt;strong&gt;d)&lt;/strong&gt; Displaying the posts&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-declaring-our-environnements-in-the-appdelegate&quot;&gt;a) Declaring our environnements in the AppDelegate&lt;/h4&gt;
&lt;p&gt;For Mirmeca to work, it needs to be provided with your environnements at startup.&lt;/p&gt;

&lt;p&gt;Easy, enough, the framework gives you a simple method to do just that. The trick is that it needs to be called from your &lt;code&gt;AppDelegate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Start by importing Mirmeca:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
import UIKit
import Mirmeca
&lt;/pre&gt;

&lt;p&gt;Then in your &lt;code&gt;application didFinishLaunchingWithOptions&lt;/code&gt; method, create a dictionary with your envs (I only have one here) and call the &lt;code&gt;MirmecaEnv.sharedInstance.defineEnvs(envList: Dictionary&amp;lt;String, String&amp;gt;, defaultEnv: String)&lt;/code&gt; method.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
    let envs = [&quot;dev&quot;: &quot;http://localhost:3000/wp-json&quot;]
    // Our default env will simply be `dev`
    MirmecaEnv.sharedInstance.defineEnvs(envs, defaultEnv: &quot;dev&quot;)

    return true
}
&lt;/pre&gt;

&lt;p&gt;So now every time Mirmeca will send a request to an API endpoint, it will use the URL of your default env, unless you specify a new one.
Let’s try that!&lt;/p&gt;

&lt;h4 id=&quot;b-integrating-our-search-bar&quot;&gt;b) Integrating our search bar&lt;/h4&gt;
&lt;p&gt;Go to your &lt;code&gt;TableViewController&lt;/code&gt; class. Start by importing Mirmeca and create an array of &lt;code&gt;posts&lt;/code&gt;. You will also need to implement the &lt;code&gt;UISearchBarDelegate&lt;/code&gt; protocol.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
import UIKit
import Mirmeca

class TableViewController: UITableViewController, UISearchBarDelegate {
    @IBOutlet weak var postsSearchBar: UISearchBar!
    var posts = [Post]()
    
...
&lt;/pre&gt;

&lt;p&gt;Now, we need to set the search bar’s delegate as &lt;code&gt;self&lt;/code&gt;.&lt;br /&gt;
In our &lt;code&gt;viewDidLoad&lt;/code&gt; method:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func viewDidLoad() {
    super.viewDidLoad()
    self.postsSearchBar.delegate = self
}
&lt;/pre&gt;

&lt;h4 id=&quot;c-fetching-our-searched-posts&quot;&gt;c) Fetching our searched posts&lt;/h4&gt;

&lt;p&gt;All good, now it’s time to trigger the search when the user hits the “Search” button. To do so we need to do 3 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the string entered by the user and make it “query friendly”.&lt;/li&gt;
  &lt;li&gt;Fetch our list of posts.&lt;/li&gt;
  &lt;li&gt;Dismiss the keyboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that will happen in the &lt;code&gt;searchBarSearchButtonClicked&lt;/code&gt; method. It will call two custom methods that we’ll implement right now.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;formatStringForSearch&lt;/code&gt; to make the user’s string “http friendly”:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
func formatStringForSearch(string: String) -&amp;gt; String {
    return string.stringByReplacingOccurrencesOfString(&quot; &quot;, withString: &quot;%20&quot;, options: NSStringCompareOptions.LiteralSearch, range: nil)
}
&lt;/pre&gt;

&lt;p&gt;All this method does is find the white spaces and replace them by &lt;code&gt;%20&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetchPostsList&lt;/code&gt; to send the request and act upon its results:&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
PostsGateway(endpoint: &quot;posts?filter[s]=\(searchQuery)&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
    if (error != nil) {
        println(error)
    } else {
        self.posts = value as! [Post]
        self.tableView.reloadData()
    }
  })
&lt;/pre&gt;

&lt;p&gt;So what are we doing here? We’re using the &lt;code&gt;PostsGateway&lt;/code&gt; method provided by Mirmeca. We’re giving it an endpoint for the search that contains the query string entered by the user and formatted by us.&lt;/p&gt;

&lt;p&gt;Then, we assign the value of our &lt;code&gt;[Post]&lt;/code&gt; array to whatever list of posts Mirmeca has returned to us and we reload the table view’s content to display these new posts.&lt;/p&gt;

&lt;p&gt;So now, we can actually call the two methods we’ve created above. We’ll do this from the &lt;code&gt;searchBarSearchButtonClicked&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
func searchBarSearchButtonClicked(searchBar: UISearchBar) {
    var searchQuery = self.formatStringForSearch(searchBar.text!)
    self.fetchPostsList(searchQuery)
    searchBar.endEditing(true)
}
&lt;/pre&gt;

&lt;p&gt;We start by grabbing the text entered by the user in the search bar.&lt;/p&gt;

&lt;p&gt;We format this string using the &lt;code&gt;formatStringForSearch&lt;/code&gt; we created earlier.&lt;/p&gt;

&lt;p&gt;We’re then using this formatted string to call &lt;code&gt;fetchPostsList&lt;/code&gt;.&lt;br /&gt;
Finally, we hide the search bar by calling &lt;code&gt;searchBar.endEditing(true)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s that simple!&lt;/p&gt;

&lt;h4 id=&quot;d-displaying-the-posts&quot;&gt;d) Displaying the posts&lt;/h4&gt;
&lt;p&gt;This bit is fairly easy, it takes 3 short steps.&lt;/p&gt;

&lt;p&gt;First, we need to set the number of sections in our table view, and we only need one here:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func numberOfSectionsInTableView(tableView: UITableView) -&amp;gt; Int {
    return 1
}
&lt;/pre&gt;

&lt;p&gt;Second, we need to set the number of rows in our section. It will correspond to the number of items we have in the posts array:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
    return self.posts.count
}
&lt;/pre&gt;

&lt;p&gt;And last but not least, we need to configure our cell to display our content.&lt;/p&gt;

&lt;p&gt;Let’s configure our cells’ &lt;code&gt;textLabel&lt;/code&gt; and &lt;code&gt;detailTextLabel&lt;/code&gt; with our post title and author’s first name respectively.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {
    let cell = tableView.dequeueReusableCellWithIdentifier(&quot;postCell&quot;, forIndexPath: indexPath) as! UITableViewCell
    
    // Get the post corresponding to the row
    let post = self.posts[indexPath.row]
    
    cell.textLabel?.text = post.title!
    cell.detailTextLabel?.text = post.author!.firstName
    return cell
}
&lt;/pre&gt;

&lt;p&gt;As you can see in the code above, populating our row is as simple as accessing properties on the &lt;code&gt;Post&lt;/code&gt; object Mirmeca is giving us.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So there you have it, a 10 minutes Mirmeca app that lets you search your posts!&lt;/p&gt;

&lt;p&gt;We’ve implemented our search feature in our app in a matter of minutes, without having to write the underlying code that would normally have been required.&lt;/p&gt;

&lt;p&gt;Need help with anything? Please get in touch solal.fitoussi [at] gmail [dot] com&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/Mirmeca/tutorial/search-feature</link>
        <guid isPermaLink="true">/Mirmeca/tutorial/search-feature</guid>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Models</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Models are the available types that you can play with. They are representations of WordPress types.&lt;/p&gt;

&lt;h3 id=&quot;list-of-available-models&quot;&gt;List of available Models&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Post&quot;&gt;Post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Term&quot;&gt;Term&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Comment&quot;&gt;Comment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Author&quot;&gt;Author&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#FeaturedImage&quot;&gt;FeaturedImage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#AttachmentMeta&quot;&gt;AttachmentMeta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#AttachmentSize&quot;&gt;AttachmentSize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;Post&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;Post&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var title: String?
var status: String?
var type: String?
var author: Author?
var content: String?
var parent: Int?
var link: String?
var date: String?
var modified: String?
var format: String?
var slug: String?
var guid: String?
var excerpt: String?
var menuOrder: Int?
var commentStatus: String?
var pingStatus: String?
var sticky: Bool?
var dateTz: String?
var dateGmt: String?
var modifiedTz: String?
var modifiedGmt: String?
var featuredImage: FeaturedImage?
var categories: [Term]?
var tags: [Term]?
var featuredImageUrl: NSURL
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;Term&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;term&quot;&gt;Term&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var name: String?
var slug: String?
var description: String?
var taxonomy: String?
var parent: Int?
var count: Int?
var link: String?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;Comment&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;comment&quot;&gt;Comment&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var post: Int?
var content: String?
var status: String?
var type: String?
var parent: Int?
var author: Author?
var date: String?
var dateTz: String?
var dateGmt: String?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;Author&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;author&quot;&gt;Author&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var username: String?
var name: String?
var firstName: String?
var lastName: String?
var nickname: String?
var slug: String?
var url: String?
var avatar: String?
var description: String?
var registered: String?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;FeaturedImage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;featuredimage&quot;&gt;FeaturedImage&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var title: String?
var status: String?
var type: String?
var author: Author?
var content: String?
var parent: Int?
var link: String?
var date: String?
var modified: String?
var format: String?
var slug: String?
var guid: String?
var excerpt: String?
var menuOrder: Int?
var commentStatus: String?
var pingStatus: String?
var sticky: Bool?
var dateTz: String?
var dateGmt: String?
var modifiedTz: String?
var modifiedGmt: String?
var terms: [Term]?
var source: String?
var isImage: Bool?
var attachmentMeta: AttachmentMeta?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;AttachmentMeta&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;attachmentmeta&quot;&gt;AttachmentMeta&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var width: Int?
var height: Int?
var file: String?
var thumbnail: AttachmentSize?
var medium: AttachmentSize?
var large: AttachmentSize?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;AttachmentSize&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;attachmentsize&quot;&gt;AttachmentSize&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var width: Int?
var height: Int?
var file: String?
var mimeType: String?
var url: String?
&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/Mirmeca/documentation/quick-doc/models</link>
        <guid isPermaLink="true">/Mirmeca/documentation/quick-doc/models</guid>
        
        
        <category>documentation</category>
        
        <category>quick-doc</category>
        
      </item>
    
      <item>
        <title>Getting Started</title>
        <description>&lt;p&gt;The aim of this Getting Started Guide is to show you how you can build an app on top of your WordPress backend in just a few minutes with Mirmeca.&lt;/p&gt;

&lt;p&gt;This tutorial assumes you’re already familiar with Cocoapods as we’ll use it to install Mirmeca. You will also need to have an installation of WordPress running the &lt;a href=&quot;https://wordpress.org/plugins/json-rest-api/&quot;&gt;WP API plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;creating-a-new-project-and-installing-mirmeca&quot;&gt;1. Creating a new project and installing Mirmeca&lt;/h3&gt;

&lt;p&gt;Open XCode and create a new “Single View Application”. I will call mine “Breaking News”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/create-app.png&quot; alt=&quot;create app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;cd&lt;/code&gt; into your app’s directory and &lt;code&gt;pod init&lt;/code&gt; to create your &lt;code&gt;Podfile&lt;/code&gt; (if you haven’t installed Cocoapods, you’ll find a guide &lt;a href=&quot;http://guides.cocoapods.org/using/getting-started.html&quot;&gt;here&lt;/a&gt; - you can also install the framework manually).&lt;/p&gt;

&lt;p&gt;Now we need to add Mirmeca to our &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;8.0&#39;
use_frameworks!

target &#39;Breaking News&#39; do
  pod &#39;Mirmeca&#39;, :git =&amp;gt; &#39;git@github.com:Mirmeca/Mirmeca.git&#39;
end

target &#39;Breaking News&#39; do
end
&lt;/pre&gt;

&lt;p&gt;Just run &lt;code&gt;pod update&lt;/code&gt; and you’re all set for the first phase.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-view-controllers&quot;&gt;2. Setting up view controllers&lt;/h3&gt;

&lt;p&gt;Open up the newly created Workspace (&lt;code&gt;.xcworkspace&lt;/code&gt;) that Cocoapods created for you.&lt;/p&gt;

&lt;p&gt;Create a new class, a subclass of &lt;code&gt;UITableViewController&lt;/code&gt;, and simply call it &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/create-class.png&quot; alt=&quot;create class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, go into your &lt;code&gt;Storyboard&lt;/code&gt; and add a &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/add-table-view-controller.png&quot; alt=&quot;add table view controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then grab the &lt;code&gt;Storyboard entry point&lt;/code&gt; (the arrow currently sitting next to your &lt;code&gt;View Controller&lt;/code&gt;), and drag it to your freshly created &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/entry-point.png&quot; alt=&quot;entry point&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click your &lt;code&gt;TableViewController&lt;/code&gt;, and in the inspector, set its class to be &lt;code&gt;TableViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/class-inspector.png&quot; alt=&quot;class inspector&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the cell of our &lt;code&gt;TableViewController&lt;/code&gt;, and set its style to “Subtitle”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/subtitle.png&quot; alt=&quot;subtitle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To finish with the Storyboard, we’ll set our cell’s identifier as &lt;code&gt;postCell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Mirmeca/assets/images/identifier.png&quot; alt=&quot;cell identifier&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;plugging-mirmeca-into-the-app&quot;&gt;3. Plugging Mirmeca into the app&lt;/h3&gt;
&lt;p&gt;It’s now time for the fun stuff and start getting data into our app.&lt;/p&gt;

&lt;p&gt;We have three simple steps ahead of us:&lt;br /&gt;
  &lt;strong&gt;a)&lt;/strong&gt; Declaring our environnements in the AppDelegate&lt;br /&gt;
  &lt;strong&gt;b)&lt;/strong&gt; Loading the latest posts&lt;br /&gt;
  &lt;strong&gt;c)&lt;/strong&gt; Displaying the posts&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-declaring-our-environnements-in-the-appdelegate&quot;&gt;a) Declaring our environnements in the AppDelegate&lt;/h4&gt;
&lt;p&gt;For Mirmeca to work, it needs to be provided with your environnements at startup.&lt;/p&gt;

&lt;p&gt;Easy, enough, the framework gives you a simple method to do just that. The trick is that it needs to be called from your &lt;code&gt;AppDelegate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Start by importing Mirmeca:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
import UIKit
import Mirmeca
&lt;/pre&gt;

&lt;p&gt;Then in your &lt;code&gt;application didFinishLaunchingWithOptions&lt;/code&gt; method, create a dictionary with your envs (I only have one here) and call the &lt;code&gt;MirmecaEnv.sharedInstance.defineEnvs(envList: Dictionary&amp;lt;String, String&amp;gt;, defaultEnv: String)&lt;/code&gt; method.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
    let envs = [&quot;dev&quot;: &quot;http://localhost:3000/wp-json&quot;]
    // Our default env will simply be `dev`
    MirmecaEnv.sharedInstance.defineEnvs(envs, defaultEnv: &quot;dev&quot;)

    return true
}
&lt;/pre&gt;

&lt;p&gt;So now every time Mirmeca will send a request to an API endpoint, it will use the URL of your default env, unless you specify a new one.
Let’s try that!&lt;/p&gt;

&lt;h4 id=&quot;b-loading-the-latest-posts&quot;&gt;b) Loading the latest posts&lt;/h4&gt;
&lt;p&gt;Go to your &lt;code&gt;TableViewController&lt;/code&gt; class. Start by importing Mirmeca and create an array of &lt;code&gt;posts&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
import UIKit
import Mirmeca

class TableViewController: UITableViewController {
    
    var posts = [Post]()
    
...
&lt;/pre&gt;

&lt;p&gt;Now, we need to work in our &lt;code&gt;viewDidLoad&lt;/code&gt; method. We’ll send a request to our WordPress backend asking for the latest posts using Mirmeca’s &lt;code&gt;PostsGateway&lt;/code&gt; class and the &lt;code&gt;posts&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func viewDidLoad() {
    super.viewDidLoad()
   
    PostsGateway(endpoint: &quot;posts&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
      if (error != nil) {
        //let&#39;s do something like print an alert
      } else {
        self.posts = value as! [Post]
      }
    })
}
&lt;/pre&gt;

&lt;p&gt;So what are we doing exactly here?&lt;br /&gt;
We start by instantiating a &lt;code&gt;PostsGateway&lt;/code&gt; object with no env (will use default) and an endpoint to get the latest posts.&lt;br /&gt;
We then pass a closure to the request method to do something once the list of posts has been returned.&lt;br /&gt;
We check if we have an error before doing anything with &lt;code&gt;value&lt;/code&gt;.
Finally, we cast &lt;code&gt;value&lt;/code&gt; to an array of posts and assign it to our &lt;code&gt;posts&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Ok that’s great! We’re all set to fetch posts from the API! We could easily print the titles of our posts or the number of posts we have in our array to make sure we’re getting something.&lt;/p&gt;

&lt;h4 id=&quot;c-displaying-the-posts&quot;&gt;c) Displaying the posts&lt;/h4&gt;
&lt;p&gt;This bit is fairly easy, it takes 3 short steps.&lt;/p&gt;

&lt;p&gt;First, we need to set the number of sections in our table view, and we only need one here:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func numberOfSectionsInTableView(tableView: UITableView) -&amp;gt; Int {
    return 1
}
&lt;/pre&gt;

&lt;p&gt;Second, we need to set the number of rows in our section. It will correspond to the number of items we have in the posts array:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
    return self.posts.count
}
&lt;/pre&gt;

&lt;p&gt;And last but not least, we need to configure our cell to display our content.&lt;/p&gt;

&lt;p&gt;Let’s configure our cells’ &lt;code&gt;textLabel&lt;/code&gt; and &lt;code&gt;detailTextLabel&lt;/code&gt; with our post title and author’s first name respectively.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {
    let cell = tableView.dequeueReusableCellWithIdentifier(&quot;postCell&quot;, forIndexPath: indexPath) as! UITableViewCell
    
    // Get the post corresponding to the row
    let post = self.posts[indexPath.row]
    
    cell.textLabel?.text = post.title!
    cell.detailTextLabel?.text = post.author!.firstName
    return cell
}
&lt;/pre&gt;

&lt;p&gt;As you can see in the code above, populating our row is as simple as accessing properties on the &lt;code&gt;Post&lt;/code&gt; object Mirmeca is giving us.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So there you have it, your first Mirmeca app!&lt;/p&gt;

&lt;p&gt;We’ve loaded our latest posts in our app in a matter of minutes, without having to write the underlying code that would normally have been required for us to implement this feature.&lt;/p&gt;

&lt;p&gt;But Mirmeca allows you to do much much more. Things like building a search functionality for your app, navigate by category, display posts by a certain tag etc…&lt;/p&gt;

&lt;p&gt;Need help with anything? Please get in touch solal.fitoussi [at] gmail [dot] com&lt;/p&gt;

</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/Mirmeca/tutorial/getting-started</link>
        <guid isPermaLink="true">/Mirmeca/tutorial/getting-started</guid>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Gateways</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Gateways implement the &lt;code&gt;Gateway&lt;/code&gt; protocol. Therefore they all follow the same convention and give you a single method for you to interact with:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
func request(completion: (value: AnyObject?, error: NSError?) -&amp;gt; Void)
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;request&lt;/code&gt; method expects a completion handler and will give you the optionals &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both can be &lt;code&gt;nil&lt;/code&gt; depending on wether the method met an error or if it properly returned content.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;value&lt;/code&gt; needs to be casted to the type you are expecting from the Gateway.&lt;br /&gt;For exemple, &lt;code&gt;PostsGateway&lt;/code&gt; will need you to cast &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;[Post]&lt;/code&gt; (an array of posts) and &lt;code&gt;TermGateway&lt;/code&gt; will need you to cast &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;Term&lt;/code&gt; (a single term).&lt;/p&gt;

&lt;h3 id=&quot;list-of-available-gateways&quot;&gt;List of available Gateways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#PostGateway&quot;&gt;PostGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#PostsGateway&quot;&gt;PostsGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#TermGateway&quot;&gt;TermGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#TermsGateway&quot;&gt;TermsGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#CommentGateway&quot;&gt;CommentGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#CommentsGateway&quot;&gt;CommentsGateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;PostGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;postgateway&quot;&gt;PostGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
PostGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as a single post
    let post = value as! Post
    println(post.title!)
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;PostsGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;postsgateway&quot;&gt;PostsGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
PostsGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of posts
    let posts = value as! [Post]
    for post in posts {
      println(post.title!)
    }
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;TermGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;termgateway&quot;&gt;TermGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
TermGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as a single term
    let term = value as! Term
    println(term.name!)
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;TermsGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;termsgateway&quot;&gt;TermsGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
TermsGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of terms
    let terms = value as! [Term]
    for term in terms {
      println(term.name!)
    }
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;CommentGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;commentgateway&quot;&gt;CommentGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
CommentGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value a single comment
    let comment = value as! [Comment]
    println(comment.author!.name!)
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;CommentsGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;commentsgateway&quot;&gt;CommentsGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
CommentsGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of comments
    let comments = value as! [Comment]
    for comment in comments {
      println(comment.author!.name!)
    }
  }
})
&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/Mirmeca/documentation/quick-doc/gateways</link>
        <guid isPermaLink="true">/Mirmeca/documentation/quick-doc/gateways</guid>
        
        
        <category>documentation</category>
        
        <category>quick-doc</category>
        
      </item>
    
      <item>
        <title>Endpoints</title>
        <description>
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/Mirmeca/documentation/quick-doc/endpoints</link>
        <guid isPermaLink="true">/Mirmeca/documentation/quick-doc/endpoints</guid>
        
        
        <category>documentation</category>
        
        <category>quick-doc</category>
        
      </item>
    
  </channel>
</rss>
