<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mirmeca</title>
    <description>Build apps on top of the WordPress API with Swift.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Aug 2015 18:42:50 +1000</pubDate>
    <lastBuildDate>Sun, 09 Aug 2015 18:42:50 +1000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Models</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Models are the available types that you can play with. They are representations of WordPress types.&lt;/p&gt;

&lt;h3 id=&quot;list-of-available-models&quot;&gt;List of available Models&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Post&quot;&gt;Post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Term&quot;&gt;Term&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Comment&quot;&gt;Comment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Author&quot;&gt;Author&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#FeaturedImage&quot;&gt;FeaturedImage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#AttachmentMeta&quot;&gt;AttachmentMeta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#AttachmentSize&quot;&gt;AttachmentSize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;Post&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;Post&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var title: String?
var status: String?
var type: String?
var author: Author?
var content: String?
var parent: Int?
var link: String?
var date: String?
var modified: String?
var format: String?
var slug: String?
var guid: String?
var excerpt: String?
var menuOrder: Int?
var commentStatus: String?
var pingStatus: String?
var sticky: Bool?
var dateTz: String?
var dateGmt: String?
var modifiedTz: String?
var modifiedGmt: String?
var featuredImage: FeaturedImage?
var categories: [Term]?
var tags: [Term]?
var featuredImageUrl: NSURL
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;Term&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;term&quot;&gt;Term&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var name: String?
var slug: String?
var description: String?
var taxonomy: String?
var parent: Int?
var count: Int?
var link: String?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;Comment&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;comment&quot;&gt;Comment&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var post: Int?
var content: String?
var status: String?
var type: String?
var parent: Int?
var author: Author?
var date: String?
var dateTz: String?
var dateGmt: String?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;Author&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;author&quot;&gt;Author&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var username: String?
var name: String?
var firstName: String?
var lastName: String?
var nickname: String?
var slug: String?
var url: String?
var avatar: String?
var description: String?
var registered: String?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;FeaturedImage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;featuredimage&quot;&gt;FeaturedImage&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var id: Int?
var title: String?
var status: String?
var type: String?
var author: Author?
var content: String?
var parent: Int?
var link: String?
var date: String?
var modified: String?
var format: String?
var slug: String?
var guid: String?
var excerpt: String?
var menuOrder: Int?
var commentStatus: String?
var pingStatus: String?
var sticky: Bool?
var dateTz: String?
var dateGmt: String?
var modifiedTz: String?
var modifiedGmt: String?
var terms: [Term]?
var source: String?
var isImage: Bool?
var attachmentMeta: AttachmentMeta?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;AttachmentMeta&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;attachmentmeta&quot;&gt;AttachmentMeta&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var width: Int?
var height: Int?
var file: String?
var thumbnail: AttachmentSize?
var medium: AttachmentSize?
var large: AttachmentSize?
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;AttachmentSize&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;attachmentsize&quot;&gt;AttachmentSize&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var width: Int?
var height: Int?
var file: String?
var mimeType: String?
var url: String?
&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/documentation/quick-doc/models</link>
        <guid isPermaLink="true">/documentation/quick-doc/models</guid>
        
        
        <category>documentation</category>
        
        <category>quick-doc</category>
        
      </item>
    
      <item>
        <title>Getting Started</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;To get started you will need a WordPress installion running the &lt;a href=&quot;https://wordpress.org/plugins/json-rest-api/&quot;&gt;&lt;strong&gt;WP API&lt;/strong&gt;&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;Interaction with your WordPress backend is made through &lt;strong&gt;Gateways&lt;/strong&gt; (&lt;code&gt;PostsGateway&lt;/code&gt;, &lt;code&gt;TermGateway&lt;/code&gt;…).&lt;/p&gt;

&lt;p&gt;Gateways let you send requests for content to WordPress in just a few lines of code.&lt;/p&gt;

&lt;p&gt;They output &lt;strong&gt;types&lt;/strong&gt; (&lt;code&gt;Post&lt;/code&gt;, &lt;code&gt;Comment&lt;/code&gt;, &lt;code&gt;Author&lt;/code&gt;…) or arrays or types.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;declare-your-environnements-in-your-appdelegate&quot;&gt;Declare your environnements in your AppDelegate&lt;/h4&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;let envs = [&quot;dev&quot;: &quot;http://localhost:3000/wp-json&quot;, &quot;staging&quot;: &quot;http://staging.example.com&quot;]
MirmecaEnv.sharedInstance.defineEnvs(envs, defaultEnv: &quot;dev&quot;)
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;send-a-request-to-get-the-latest-posts-in-your-viewcontroller&quot;&gt;Send a request to get the latest posts in your ViewController&lt;/h4&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
// Pass the &quot;posts&quot; endpoint &amp;amp; use the default env
PostsGateway(endpoint: &quot;posts&quot;, env: nil).request({})
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;print-the-posts-by-passing-a-closure-to-the-request-method&quot;&gt;Print the posts by passing a closure to the &lt;code&gt;request&lt;/code&gt; method&lt;/h4&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
PostsGateway(endpoint: &quot;posts&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of posts
    let posts = value as! [Post]
    for post in posts {
      println(post.title!)
    }
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;use-cases&quot;&gt;Use cases&lt;/h1&gt;
&lt;p&gt;Here are three of the numerous things &lt;strong&gt;Mirmeca&lt;/strong&gt; helps you accomplish.&lt;/p&gt;

&lt;h4 id=&quot;types--gateways&quot;&gt;Types &amp;amp; Gateways&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Check the list available &lt;strong&gt;types&lt;/strong&gt; &lt;a href=&quot;/documentation/models/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check the list available &lt;strong&gt;Gateways&lt;/strong&gt; &lt;a href=&quot;/documentation/gateways/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;search-for-posts&quot;&gt;Search for posts&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Endpoint: &lt;code&gt;posts?filter[s]=&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Gateway: &lt;code&gt;PostsGateway&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
let query = &quot;chocolate%20cake&quot;
PostsGateway(endpoint: &quot;posts?filter[s]=\(query)&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of posts
    let posts = value as! [Post]
    for post in posts {
      println(post.title!)
    }
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;list-your-sites-categories&quot;&gt;List your site’s categories&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Endpoint: &lt;code&gt;taxonomies/category/terms&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Gateway: &lt;code&gt;TermsGateway&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
TermsGateway(endpoint: &quot;taxonomies/category/terms&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
    // Make sure that something was returned
    if (error != nil) {
        println(&quot;Something went wrong&quot;)
    } else {
        // Cast the return value as an array of terms
        let categories = value as! [Term]
        for category in categories {
            println(category.name!)
        }
    }
})
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;retrieve-comments-for-a-post&quot;&gt;Retrieve comments for a post&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Endpoint: &lt;code&gt;posts/40627/comments&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Gateway: &lt;code&gt;CommentsGateway&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
CommentsGateway(endpoint: &quot;posts/40627/comments&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
    // Make sure that something was returned
    if (error != nil) {
        println(&quot;Something went wrong&quot;)
    } else {
        // Cast the return value as an array of comments
        let comments = value as! [Comment]
        for comment in comments {
            println(comment.author!.name!)
        }
    }
})
&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/getting-started</link>
        <guid isPermaLink="true">/getting-started</guid>
        
        
      </item>
    
      <item>
        <title>Gateways</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Gateways implement the &lt;code&gt;Gateway&lt;/code&gt; protocol. Therefore they all follow the same convention and give you a single method for you to interact with:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
func request(completion: (value: AnyObject?, error: NSError?) -&amp;gt; Void)
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;request&lt;/code&gt; method expects a completion handler and will give you the optionals &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both can be &lt;code&gt;nil&lt;/code&gt; depending on wether the method met an error or if it properly returned content.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;value&lt;/code&gt; needs to be casted to the type you are expecting from the Gateway.&lt;br /&gt;For exemple, &lt;code&gt;PostsGateway&lt;/code&gt; will need you to cast &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;[Post]&lt;/code&gt; (an array of posts) and &lt;code&gt;TermGateway&lt;/code&gt; will need you to cast &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;Term&lt;/code&gt; (a single term).&lt;/p&gt;

&lt;h3 id=&quot;list-of-available-gateways&quot;&gt;List of available Gateways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#PostGateway&quot;&gt;PostGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#PostsGateway&quot;&gt;PostsGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#TermGateway&quot;&gt;TermGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#TermsGateway&quot;&gt;TermsGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#CommentGateway&quot;&gt;CommentGateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#CommentsGateway&quot;&gt;CommentsGateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;PostGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;postgateway&quot;&gt;PostGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
PostGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as a single post
    let post = value as! Post
    println(post.title!)
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;PostsGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;postsgateway&quot;&gt;PostsGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
PostsGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of posts
    let posts = value as! [Post]
    for post in posts {
      println(post.title!)
    }
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;TermGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;termgateway&quot;&gt;TermGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
TermGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as a single term
    let term = value as! Term
    println(term.name!)
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;TermsGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;termsgateway&quot;&gt;TermsGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
TermsGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of terms
    let terms = value as! [Term]
    for term in terms {
      println(term.name!)
    }
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;CommentGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;commentgateway&quot;&gt;CommentGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
CommentGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value a single comment
    let comment = value as! [Comment]
    println(comment.author!.name!)
  }
})
&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;CommentsGateway&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;commentsgateway&quot;&gt;CommentsGateway&lt;/h3&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
//Possible implementation
CommentsGateway(endpoint: &quot;:my-endpoint&quot;, env: nil).request({ (value: AnyObject?, error: NSError?) -&amp;gt; Void in
  // Make sure that something was returned
  if (error != nil) {
    println(&quot;Something went wrong&quot;)
  } else {
    // Cast the return value as an array of comments
    let comments = value as! [Comment]
    for comment in comments {
      println(comment.author!.name!)
    }
  }
})
&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/documentation/quick-doc/gateways</link>
        <guid isPermaLink="true">/documentation/quick-doc/gateways</guid>
        
        
        <category>documentation</category>
        
        <category>quick-doc</category>
        
      </item>
    
      <item>
        <title>Endpoints</title>
        <description>
</description>
        <pubDate>Sun, 09 Aug 2015 02:37:18 +1000</pubDate>
        <link>/documentation/quick-doc/endpoints</link>
        <guid isPermaLink="true">/documentation/quick-doc/endpoints</guid>
        
        
        <category>documentation</category>
        
        <category>quick-doc</category>
        
      </item>
    
  </channel>
</rss>
